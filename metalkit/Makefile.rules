#
# Common GNU Make rules for compiling Metalkit apps.
#
# To build your own apps, you just need a makefile which
# defines a few variables and includes this one. For example:
#
#    METALKIT_LIB = path/to/metalkit/lib
#    TARGET = myapp.img
#    LIB_MODULES = boot vgatext
#    APP_MODULES = main
#    include $(METALKIT_LIB)/Makefile.rules
#

# Basic options necessary to produce our standalone binary.
# Produce 32-bit code, even on 64-bit machines. Don't use
# the standard library at all. Use a custom linker script.

CFLAGS := -m32 -ffreestanding -nostdinc -fno-stack-protector -I$(METALKIT_LIB)
LDFLAGS := -nostdlib -Wl,-T,$(METALKIT_LIB)/image.ld

# Extra warnings
CFLAGS += -Wall -Werror

# Size Optimizations.
CFLAGS += -Os -Wl,--gc-sections -ffunction-sections -fdata-sections

# This enables extra gcc builtins for floating point math.
CFLAGS += -march=i686 -ffast-math

# Generate debug symbols. These only show up in the .elf file,
# not the final image. If you're using QEMU (or some versions
# of VMware) you can point gdb at these symbols and get source
# level debugging on the simulated bare metal. Neat.
CFLAGS += -g

SOURCES := \
  $(METALKIT_LIB)/boot.S \
  $(METALKIT_LIB)/gcc_support.c \
  $(addprefix $(METALKIT_LIB)/, $(addsuffix .c, $(LIB_MODULES))) \
  $(APP_SOURCES)

ELF_TARGET := $(subst .img,.elf,$(TARGET))
LST_TARGET := $(subst .img,.lst,$(TARGET))

.PHONY: target clean sizeprof listing

target: $(TARGET)

%.lst: %.elf
	objdump -d $< > $@

# Pad rule added for compatibility with VirtualBox. Can be commented
# out to save space for qemu or vmware

%.img: %.elf
	objcopy -O binary $< $@
#	python $(METALKIT_LIB)/pad.py $@ 512

# Stackable rules for processing data files

%.data.o: %
	objcopy -I binary -O elf32-i386 -B i386 $< $@

%.z: %
	python $(METALKIT_LIB)/deflate.py < $< > $@

# To optimize size, we compile all input files in one step. This
# lets GCC use information available from all files during its
# optimization phase.

$(ELF_TARGET): $(SOURCES)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $(SOURCES)

clean:
	rm -f $(TARGET) $(ELF_TARGET) $(LST_TARGET) *.o

# This is a phony target which prints a list of symbols, sorted by
# size, and excluding the BSS segment. This is a quick way to see
# which functions and initialized data are taking the most space in
# the final binary.

sizeprof: $(ELF_TARGET)
	@nm --size-sort -S $< | egrep -v " [bBsS] "

# Another phony target, for convenience, which dumps an assembly
# listing to stdout.

listing: $(ELF_TARGET)
	objdump -d $<

